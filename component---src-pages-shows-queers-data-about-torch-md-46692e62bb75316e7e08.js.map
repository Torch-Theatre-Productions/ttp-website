{"version":3,"file":"component---src-pages-shows-queers-data-about-torch-md-46692e62bb75316e7e08.js","mappings":"0LAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,0CAA2C,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,qXAAsX,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,sUAAuUI,EAAAA,cAAoBR,EAAYK,EAAG,CACl8BI,KAAM,4CACL,qBAAsB,KAAM,KAAMD,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,sDAAuDI,EAAAA,cAAoBR,EAAYK,EAAG,CACtKI,KAAM,6EACL,YAAa,WAAYD,EAAAA,cAAoBR,EAAYK,EAAG,CAC7DI,KAAM,sDACL,aAAc,kDACnB,CAKA,UAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECaO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,C","sources":["webpack://torch-theatre-productions-website/./src/pages/shows/queers/data/aboutTorch.md","webpack://torch-theatre-productions-website/./.yarn/__virtual__/@mdx-js-react-virtual-349c9d4f43/0/cache/@mdx-js-react-npm-2.3.0-d5582a450b-f45fe77955.zip/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"About Torch Theatre Productions Oxford\"), \"\\n\", React.createElement(_components.p, null, \"We formed Torch Theatre Productions Oxford in 2022 and staged a fundraising\\r\\nconcert at Somerville College in December 2022. We became a registered Community\\r\\nInterest Company in February 2023. Our aim is to provide opportunities for\\r\\npeople in the local community to engage with theatre as audience members and\\r\\nperformers, and in creative and technical roles.\"), \"\\n\", React.createElement(_components.p, null, \"If you have ever wondered what it takes to produce theatre, and would be\\r\\ninterested in getting involved, please get in touch with us! There is so much\\r\\nscope for creativity when producing theatre, and a lot of it is off-stage - from\\r\\nwriting press releases to recording and editing video. If this appeals to you,\\r\\n\", React.createElement(_components.a, {\n    href: \"mailto:torchtheatreproductions@gmail.com\"\n  }, \"sling us an email\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"If you haven't already, be sure to follow us on\\r\\n\", React.createElement(_components.a, {\n    href: \"https://www.facebook.com/people/TORCH-Theatre-Productions/100087729183473\"\n  }, \"Facebook\"), \"\\r\\nand \", React.createElement(_components.a, {\n    href: \"https://www.instagram.com/torchtheatreproductions/\"\n  }, \"Instagram\"), \" to keep up\\r\\nto date with upcoming projects.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}