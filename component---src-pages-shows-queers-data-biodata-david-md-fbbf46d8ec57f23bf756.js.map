{"version":3,"file":"component---src-pages-shows-queers-data-biodata-david-md-fbbf46d8ec57f23bf756.js","mappings":"0LAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0IAA2II,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,eAAgB,yBAA0BG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,kBAAmB,mBAAoBG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,gBAAiB,kBAAmBG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,6BAA8B,qBAAsBG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,mBAAoB,sDAAuDG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,wBAAyB,wBAAyBG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,2BAA4B,2CAA4CG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,QAAS,kBAAmBG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,6BAA8B,qDAAsDG,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,aAAc,sVAC7kC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECoBO,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack://torch-theatre-productions-website/./src/pages/shows/queers/data/biodata/david.md","webpack://torch-theatre-productions-website/./.yarn/__virtual__/@mdx-js-react-virtual-349c9d4f43/0/cache/@mdx-js-react-npm-2.3.0-d5582a450b-f45fe77955.zip/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"David has been acting with various Oxford-based theatre groups since his student\\r\\ndays. Favourite roles have included the Shamrayev (\", React.createElement(_components.em, null, \"The Seagull\"), \"), Duke\\r\\nFrederick (\", React.createElement(_components.em, null, \"As You Like It\"), \"), Revd Parris (\", React.createElement(_components.em, null, \"The Crucible\"), \"), Mr Alfieri (\", React.createElement(_components.em, null, \"A View\\r\\nfrom the Bridge\"), \") and Dr Livesey (\", React.createElement(_components.em, null, \"Treasure Island\"), \"), all with Oxford Theatre\\r\\nGuild; Dwornitschek (\", React.createElement(_components.em, null, \"The Play’s the Thing\"), \") and M de Tréville (\", React.createElement(_components.em, null, \"The Three\\r\\nMusketeers\"), \") with ElevenOne Theatre; Mr Woodhouse (\", React.createElement(_components.em, null, \"Emma\"), \") and Leonato (\", React.createElement(_components.em, null, \"Much\\r\\nAdo About Nothing\"), \"), both with Thistledown Theatre; and Gloucester (\", React.createElement(_components.em, null, \"King Lear\"), \")\\r\\nwith Siege Theatre. David has also played the piano at cabaret and revue\\r\\nevenings, and for local theatre companies including Oxford Dance Theatre, Oxford\\r\\nComedy Deathmatch, and the Oxford Stage Company (accompanying a very young\\r\\nMartin Freeman). He also played for Torch Theatre Productions’ inaugural concert\\r\\nin December.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}