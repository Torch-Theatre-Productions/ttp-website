{"version":3,"file":"component---src-pages-shows-queers-data-oxford-pride-mdx-b69b6a8b4233bfec32f7.js","mappings":"iRAAA,EAAe,IAA0B,yDCKlC,MAAMA,EAAqBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,iCAAAC,YAAA,eAAVJ,CAAU,6JAY5C,SAASK,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,gBAAiB,KAAMM,EAAAA,cAAoBjB,EAAmB,KAAMiB,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,4PAA6PK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,+FAAgGK,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,UAAW,aAAcI,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,2EAA4EK,EAAAA,cAAoBT,EAAYM,EAAG,CACx0BI,KAAM,2BACL,mCAAoC,MAAOD,EAAAA,cAAoB,MAAO,CACvEE,IAAKC,KAET,CAKA,MAJA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWf,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECAO,MAAMgB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,IAChC,CAACS,EAAmBT,GACzB,C","sources":["webpack://torch-theatre-productions-website/./src/pages/shows/queers/data/images/pride-logo.png","webpack://torch-theatre-productions-website/./src/pages/shows/queers/data/oxfordPride.mdx","webpack://torch-theatre-productions-website/./.yarn/__virtual__/@mdx-js-react-virtual-349c9d4f43/0/cache/@mdx-js-react-npm-2.3.0-d5582a450b-f45fe77955.zip/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/pride-logo-8aa2ff12896749ba764795658b2f50c2.png\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport PrideImage from \"./images/pride-logo.png\";\nexport const DivWithImageRight = (styled.div)`\n  display: flex;\n  flex-direction: column;\n  img {\n    max-width: 250px;\n    align-self: center;\n  }\n  @media all and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: 1fr 30%;\n  }\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    em: \"em\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Oxford Pride\"), \"\\n\", React.createElement(DivWithImageRight, null, React.createElement(\"div\", null, React.createElement(_components.p, null, \"At the end of each performance, we will be collecting for Oxford Pride. Run by\\r\\nvolunteers, Oxford Pride is a registered charity that celebrates lesbian, gay,\\r\\nbisexual, transgender and queer life in Oxfordshire. Thank you for all your support!\"), React.createElement(_components.p, null, \"We'd like to take a moment to extend our thanks to Oxford Pride for their\\r\\nsupport of the \", React.createElement(_components.em, null, \"Queers\"), \" project.\"), React.createElement(_components.p, null, \"If you'd like to know more about, or get involved with Oxford Pride,\\r\\n\", React.createElement(_components.a, {\n    href: \"https://oxfordpride.uk/\"\n  }, \"you can find their website here\"), \".\")), React.createElement(\"img\", {\n    src: PrideImage\n  })));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["DivWithImageRight","styled","div","withConfig","displayName","componentId","_createMdxContent","props","_components","Object","assign","h1","p","em","a","_provideComponents","components","React","href","src","PrideImage","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}